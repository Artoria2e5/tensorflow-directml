# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

parameters:
- name: IncludeTests
  type: boolean
  default: true
- name: IncludeCApi
  type: boolean
  default: false

steps:
- powershell: |
    $CondaEnv = "build_tensorflow_dml_1.15_$(PyVersion)"
    if ("$(Architecture)" -eq "x64-linux")
    {
      cmd /c "wsl cd $(TfSourcePathWsl); third_party/dml/ci/build/wsl_gather_test_binaries.sh $CondaEnv $(TfArtifactsPathWsl) $(TfArtifactsPathWinAsWsl)/artifacts/tests/test_binaries"
    }
    else
    {
      & "$env:SYSTEMDRIVE/apilot/miniconda3/shell/condabin/conda-hook.ps1"
      conda activate $CondaEnv
      python third_party/dml/ci/build/gather_test_binaries.py --source_root . --build_output $(TfArtifactsPathWin) --destination $(TfArtifactsPathWin)\artifacts\tests\test_binaries
    }
  name: gather_step
  condition: and(succeeded(), eq('${{parameters.IncludeTests}}', true))
  displayName: gather_test_binaries.py
  workingDirectory: $(TfSourcePathWin)

- powershell: |
    New-Item -Force -ItemType Directory -Path "$(TfArtifactsPathWin)\artifacts"

    if ("$(Architecture)" -eq "x64-linux")
    {
      Write-Host "Copy $(TfArtifactsPathWsl)/python_package/* -> $(TfArtifactsPathWinAsWsl)/artifacts"
      wsl cp -rT $(TfArtifactsPathWsl)/python_package $(TfArtifactsPathWinAsWsl)/artifacts

      if ("${{parameters.IncludeTests}}" -eq "True")
      {
        Write-Host "Copy third_party/dml/ci/test/* -> $(TfArtifactsPathWinAsWsl)/artifacts"
        wsl cp -rT $(TfSourcePathWsl)/third_party/dml/ci/test $(TfArtifactsPathWinAsWsl)/artifacts
      }

      if ("${{parameters.IncludeCApi}}" -eq "True")
      {
        Write-Host "Copy $(TfSourcePathWsl)/bazel-bin/tensorflow/tools/lib_package/libtensorflow.tar.gz -> $(TfArtifactsPathWinAsWsl)/artifacts"
        wsl cp "$(TfSourcePathWsl)/bazel-bin/tensorflow/tools/lib_package/libtensorflow.tar.gz" $(TfArtifactsPathWinAsWsl)/artifacts
      }
    }
    else
    {
      # Robocopy returns non-zero exit codes for successful copies, so zero it to prevent ADO task from failing.
      robocopy /e "$(TfArtifactsPathWin)\python_package" "$(TfArtifactsPathWin)\artifacts"
      if ($LASTEXITCODE -ge 8) { throw "Robocopy failed with code $LASTEXITCODE" } else { $LASTEXITCODE = 0 }
      
      if ("${{parameters.IncludeTests}}" -eq "True")
      {
        robocopy /e "$(TfSourcePathWin)/third_party/dml/ci/test" "$(TfArtifactsPathWin)\artifacts"
        if ($LASTEXITCODE -ge 8) { throw "Robocopy failed with code $LASTEXITCODE" } else { $LASTEXITCODE = 0 }
      }

      if ("${{parameters.IncludeCApi}}" -eq "True")
      {
        Copy-Item "$(TfSourcePathWin)\bazel-bin\tensorflow\tools\lib_package\libtensorflow.tar.gz" "$(TfArtifactsPathWin)\artifacts" -Verbose
      }
    }
  name: stage_artifacts
  displayName: Stage Artifacts

- task: PublishBuildArtifacts@1
  displayName: 'Publish Build Artifacts'
  inputs:
    PathtoPublish: '$(TfArtifactsPathWin)\artifacts'
    ArtifactName: '$(Architecture)-$(Configuration)-$(PyVersion)'