# Copyright (c) Microsoft Corporation.
# Licensed under the MIT License.

steps:
# The built-in checkout task doesn't allow for additional git command-line args such as
# "--config core.autocrlf", so we have a custom clone step in PS. The most important part here
# is to ensure we clone with auto-converted line endings on Windows, but retain the original 
# Linux line endings when building in WSL. This extra configuration is required since the ADO
# agents are running on Windows and will, by default, always convert line endings to CRLF.
- checkout: none
- powershell: |
    # Append ".dev<DATE>" to the _VERSION variable in setup.py. For example, if the pipeline version
    # is 200610-2233.1.master, and _VERSION is currently 1.15.2, then the updated version will be
    # 1.15.2.dev200610.
    function UpdatePkgVersion()
    {
      # DevVersion is the first 6 digits of the pipeline version (e.g. 200610-2233.1.master -> 200610)
      $DevVersion = "$(Build.BuildNumber)" -replace '(\d{6}).*','$1'
      $SetupPyPath = "$SourcePathWin/tensorflow/tools/pip_package/setup.py"
      $SetupPy = (Get-Content $SetupPyPath -Raw) -replace "_VERSION = '(\d+\.\d+\.\d+).*'", "_VERSION = '`$1.dev$DevVersion'"
      Set-Content $SetupPyPath $SetupPy -Encoding ascii
    }

    $Url = "https://github.com/microsoft/tensorflow-directml"
    $Branch = "$(Build.SourceBranch)" -replace "^refs/heads/"

    if (Test-Path "$env:SYSTEMDRIVE\ap_build") { cmd /c rd /s /q "$env:SYSTEMDRIVE\ap_build" }

    $SourcePathWin = "$env:SYSTEMDRIVE\ap_build\s" # e.g. C:\ap_build\s
    $SourcePathWinAsWsl = (wsl wslpath ("$SourcePathWin" -replace '\\','/')) # e.g. /mnt/c/ap_build/s
    $SourcePathWsl = "~/ap_build/s" # e.g. /home/apilot/ap_build/s

    $ArtifactsPathWin = "$env:SYSTEMDRIVE\ap_build\a" # e.g. C:\Users\apilot\ap_build\a
    $ArtifactsPathWinAsWsl = (wsl wslpath ("$ArtifactsPathWin" -replace '\\','/')) # e.g. /mnt/c/apilot/agent/_work/8/a
    $ArtifactsPathWsl = "~/ap_build/a" # e.g. /home/apilot/ap_build/a

    New-Item -Path $ArtifactsPathWin -ItemType Directory -Force

    if ("$(Architecture)" -eq "x64-linux")
    {
      # Can't clone source directly to the WSL filesystem, so clone to Windows and copy to WSL
      wsl rm -rf ~/ap_build
      wsl mkdir -p $ArtifactsPathWsl
      Invoke-Expression "git clone $Url --recursive --depth 1 --branch $Branch --config core.autocrlf=input $SourcePathWin"
      UpdatePkgVersion
      Write-Host "Copy $SourcePathWinAsWsl to $SourcePathWsl"
      wsl cp -rT $SourcePathWinAsWsl $SourcePathWsl
    }
    else
    {
      Invoke-Expression "git clone $Url --recursive --depth 1 --branch $Branch $SourcePathWin"
      UpdatePkgVersion
    }

    Set-Location $SourcePathWin
    $TfSourceVersion = git rev-parse HEAD

    # Save paths as variables so future steps can use them
    Write-Host "##vso[task.setvariable variable=TfSourcePathWin]$SourcePathWin"
    Write-Host "##vso[task.setvariable variable=TfSourcePathWinAsWsl]$SourcePathWinAsWsl"
    Write-Host "##vso[task.setvariable variable=TfSourcePathWsl]$SourcePathWsl"
    Write-Host "##vso[task.setvariable variable=TfArtifactsPathWin]$ArtifactsPathWin"
    Write-Host "##vso[task.setvariable variable=TfArtifactsPathWinAsWsl]$ArtifactsPathWinAsWsl"
    Write-Host "##vso[task.setvariable variable=TfArtifactsPathWsl]$ArtifactsPathWsl"
    Write-Host "##vso[task.setvariable variable=TfSourceVersion]$TfSourceVersion"
    Write-Host "TfSourcePathWin         = $SourcePathWin"
    Write-Host "TfSourcePathWinAsWsl    = $SourcePathWinAsWsl"
    Write-Host "TfSourcePathWsl         = $SourcePathWsl"
    Write-Host "TfArtifactsPathWin      = $ArtifactsPathWin"
    Write-Host "TfArtifactsPathWinAsWsl = $ArtifactsPathWinAsWsl"
    Write-Host "TfArtifactsPathWsl      = $ArtifactsPathWsl"
    Write-Host "TfSourceVersion         = $TfSourceVersion"
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)
  displayName: Clone TensorFlow